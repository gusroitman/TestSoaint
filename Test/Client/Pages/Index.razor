@page "/"

@using Microsoft.AspNetCore.Authorization;
@using Test.Client.Services;

@inject IProductService ProductService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>DashBoard de Productos</PageTitle>

<h3>Mis Productos</h3>
@*
<MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Element,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Number</MudTd>
        <MudTd DataLabel="Sign">@context.Sign</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Position">@context.Position</MudTd>
        <MudTd DataLabel="Molar mass">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
*@
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Precio</th>
            <th>Foto</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in ProductService.Products)
        {
            <tr>
                <td>@product.ProductId</td>
                <td>@product.ProductName</td>
                <td>@product.ProductDescription</td>
                <td>@product.ProductPrice</td>
                <td>@product.ProductPhoto</td>
                <td>
                    <button class="btn btn-primary"
                        @onclick="(() => ShowProduct(product.ProductId))">
                        <i class="oi oi-pencil"></i>
                    </button>
                    <button class="btn btn-danger"
                        @onclick="(() =>DeleteProduct(product.ProductId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary"
        @onclick="CreateNewProduct">
    Crear Nuevo Producto
</button>

@code {

      Test.Shared.Models.Product product = new Test.Shared.Models.Product { ProductName = "Nuevo Producto" };

    protected override async Task OnInitializedAsync()
    {
        await ProductService.GetProducts();
        await base.OnInitializedAsync();

    }

    void ShowProduct(int id)
    {
        NavigationManager.NavigateTo($"product/{id}");
    }

    async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProduct(product.ProductId);
        Snackbar.Add("El producto ha sido borrado correctamente", Severity.Success);
    }

    void CreateNewProduct()
    {
        NavigationManager.NavigateTo("/product");
    }
    /*
    private bool FilterFunc1(Product element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Product element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
            return true;
        return false;
    }
    */
}



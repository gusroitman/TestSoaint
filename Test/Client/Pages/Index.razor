@page "/"

@using Microsoft.AspNetCore.Authorization;
@using Test.Client.Services;

@inject IProductService ProductService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@attribute [Authorize]

<PageTitle>DashBoard de Productos</PageTitle>

<h3>Mis Productos</h3>

<MudTable Items="@products" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Test.Shared.Models.Product,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Productos</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Descripcion</MudTh>
        <MudTh>Precio</MudTh>
        <MudTh>Foto</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="id">@context.ProductId</MudTd>
        <MudTd DataLabel="Name">@context.ProductName</MudTd>
        <MudTd DataLabel="Description">@context.ProductDescription</MudTd>
        <MudTd DataLabel="Price">@context.ProductPrice</MudTd>
        <MudTd DataLabel="Photo">@context.ProductPhoto</MudTd>
		<MudTd Class="pa-4 mt-4" DataLabel="Actions">
			<MudButton Variant="Variant.Filled" Color="Color.Info" DisableElevation="true" OnClick="@(()=>ShowProduct(@context.ProductId))">Update</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Error" DisableElevation="true" OnClick="@(()=>DeleteProduct(@context.ProductId))">Borrar</MudButton>
		</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
@*
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Precio</th>
            <th>Foto</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in ProductService.Products)
        {
            <tr>
                <td>@product.ProductId</td>
                <td>@product.ProductName</td>
                <td>@product.ProductDescription</td>
                <td>@product.ProductPrice</td>
                <td>@product.ProductPhoto</td>
                <td>
                    <button class="btn btn-primary"
                        @onclick="(() => ShowProduct(product.ProductId))">
                        <i class="oi oi-pencil"></i>
                    </button>
                    <button class="btn btn-danger"
                        @onclick="(() =>DeleteProduct(product.ProductId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary"
        @onclick="CreateNewProduct">
    Crear Nuevo Producto
</button>
*@

@code {

    Test.Shared.Models.Product product = new Test.Shared.Models.Product { ProductName = "Nuevo Producto" };

    Test.Shared.Models.Product Producto = new Test.Shared.Models.Product();

    public List<Test.Shared.Models.Product> products = new List<Test.Shared.Models.Product>();

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Product selectedItem1 = null;
    public string? Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await ProductService.GetProducts();
            await base.OnInitializedAsync();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    void ShowProduct(int id)
    {
        NavigationManager.NavigateTo($"producto/{id}");
    }

    async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProduct(product.ProductId);
        Snackbar.Add("El producto ha sido borrado correctamente", Severity.Success);
    }

    void CreateNewProduct()
    {
        NavigationManager.NavigateTo("/producto");
    }
    
    private bool FilterFunc1(Test.Shared.Models.Product element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Test.Shared.Models.Product element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        //if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        if (element.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }
    
    
}


